{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["CardContainer","styled","div","Card","props","title","taskId","storyPoints","assignee","onClick","className","transformItem","item","storyPointsField","customfields","customfield","find","f","customfieldname","customfieldvalues","customfieldvalue","toString","match","key","Container","App","useState","xml","setXml","cardInfos","setCardInfos","style","width","marginBottom","textAlign","name","id","cols","rows","value","onChange","e","currentTarget","rss","parser","parse","attrValueProcessor","val","attrName","he","decode","isAttributeValue","tagValueProcessor","tagName","items","channel","Array","isArray","oldItems","map","console","error","cardInfo","confirm","filter","removeCard","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0sCAGA,IAAMA,EAAgBC,IAAOC,IAAV,KA6DJC,EAZF,SAACC,GAAW,IACfC,EAAkDD,EAAlDC,MAAOC,EAA2CF,EAA3CE,OAAQC,EAAmCH,EAAnCG,YAAaC,EAAsBJ,EAAtBI,SAAUC,EAAYL,EAAZK,QAE9C,OACE,kBAACT,EAAD,CAAeU,UAAU,OAAOD,QAASA,GACvC,4BAAKH,GACL,gCAAMC,GAAe,IAArB,KAA4BF,GAE5B,0BAAMK,UAAU,YAAYF,K,uUCrDlC,IAAMG,EAAgB,SAAAC,GAAS,IAAD,MAEtBC,IADe,UAAAD,EAAKE,oBAAL,eAAmBC,cAAe,IACjBC,MAAK,SAAAC,GAAC,MAA0B,yBAAtBA,EAAEC,mBAC5CX,EAAW,OAAGM,QAAH,IAAGA,GAAH,UAAGA,EAAkBM,yBAArB,aAAG,EAAqCC,iBAGzD,MAAO,CACLf,MAHS,YAAQ,OAAJO,QAAI,IAAJA,OAAA,EAAAA,EAAMP,QAAS,IAAIgB,WAAWC,MAAM,yBAAxC,aAAG,EAAyD,GAIrEf,cACAD,OAAQM,EAAKW,IACbf,SAAUI,EAAKJ,WAIbgB,EAAYvB,IAAOC,IAAV,KAqEAuB,MAhDf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNC,EADM,KACDC,EADC,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,KA6Bb,OACE,kBAACN,EAAD,KACE,yBAAKd,UAAU,uBAAuBqB,MAAO,CAAEC,MAAO,OAAQC,aAAc,OAAQC,UAAW,UAC7F,8BACEC,KAAK,GACLC,GAAG,GACHC,KAAK,KACLC,KAAK,KACLC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAOa,EAAEC,cAAcH,UAE1C,4BAAQ9B,QArCG,WACf,IAAK,IAAD,EACMkC,EAAQC,IAAOC,MAAMlB,EAAK,CAChCmB,mBAAoB,SAACC,EAAKC,GAAN,OAAmBC,IAAGC,OAAOH,EAAK,CAACI,kBAAkB,KACzEC,kBAAoB,SAACL,EAAKM,GAAN,OAAkBJ,IAAGC,OAAOH,MAF1CJ,IAIFW,GAAW,OAAHX,QAAG,IAAHA,GAAA,UAAAA,EAAKY,eAAL,eAAc3C,OAAQ,GAEhC4C,MAAMC,QAAQH,GAChBxB,GAAa,SAAA4B,GAAQ,4BAAQJ,EAAMK,IAAIhD,IAAlB,YAAqC+C,OAE1D5B,GAAa,SAAA4B,GAAQ,OAAK/C,EAAc2C,IAAnB,mBAA8BI,OAErD9B,EAAO,IACP,MAAOa,GACPmB,QAAQC,MAAMpB,MAsBZ,iBAGDZ,EAAU8B,KAAI,SAAAG,GAAQ,OAAK,kBAAC,EAAD,eAAMvC,IAAKuC,EAASxD,QAAYwD,EAAhC,CAA0CrD,QAAS,kBAtBhE,SAACqD,GAEbC,QAAQ,+CAEbjC,GAAa,SAAA4B,GAAQ,OAAIA,EAASM,QAAO,SAAApD,GAAI,OAAIA,IAASkD,QAkB6BG,CAAWH,YCzElFI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/C,MACvB,2DCZNgD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLD,QAAQC,MAAMA,EAAMqB,c","file":"static/js/main.1ebb54c0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst CardContainer = styled.div`\n  position: relative;\n  margin-bottom: 40px;\n  height: calc(50vh - 40px);\n  box-sizing: border-box;\n  flex: 0 0 50%;\n  border-left: 12px solid black;\n  padding: 0 16px;\n  cursor: pointer;\n  \n  &:nth-child(4n), &:nth-child(4n+2) {\n    &:before {\n      content: \"\";\n      position: absolute;\n      height: calc(100% + 34px);\n      top: -20px;\n      right: 8px;\n      border-right: 2px dashed #000;\n    }\n  }\n\n  &:nth-child(4n+2), &:nth-child(4n+3) {\n    &:after {\n      content: \"\";\n      position: absolute;\n      width: calc(100% + 4px);\n      bottom: -20px;\n      left: -12px;\n      border-bottom: 2px dashed #000;\n    }\n  }\n\n  h3 {\n    font-size: 18px;\n    font-weight: normal;\n  }\n  \n  h2 {\n    height: 24px;\n  }\n  \n  span.assignee {\n    display: inline-block;\n    position: absolute;\n    right: 20px;\n    bottom: 10px;\n  }\n`\n\nconst Card = (props) => {\n  const { title, taskId, storyPoints, assignee, onClick } = props;\n\n  return (\n    <CardContainer className=\"card\" onClick={onClick}>\n      <h3>{taskId}</h3>\n      <h2>({storyPoints || ' '}) {title}</h2>\n\n      <span className=\"assignee\">{assignee}</span>\n    </CardContainer>\n  )\n};\nexport default Card;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport parser from 'fast-xml-parser';\nimport he from 'he';\n\nimport Card from './components/Card';\n\nconst transformItem = item => {\n  const customFields = item.customfields?.customfield || [];\n  const storyPointsField = customFields.find(f => f.customfieldname === 'Story point estimate');\n  const storyPoints = storyPointsField?.customfieldvalues?.customfieldvalue;\n  const title = (item?.title || '').toString().match(/(\\[.*\\] )*(.+)/)?.[2];\n\n  return {\n    title,\n    storyPoints,\n    taskId: item.key,\n    assignee: item.assignee,\n  };\n};\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  \n  .no-print {\n    @media print {    \n      display: none !important;\n    }\n  }\n\n  .input-block {\n    padding: 16px;\n\n    textarea {\n      width: 100%;\n    }\n  }\n`;\n\nfunction App() {\n  const [xml, setXml] = useState('');\n  const [cardInfos, setCardInfos] = useState([]);\n  const onSubmit = () => {\n    try {\n      const { rss } = parser.parse(xml, {\n        attrValueProcessor: (val, attrName) => he.decode(val, {isAttributeValue: true}),\n        tagValueProcessor : (val, tagName) => he.decode(val),\n      });\n      const items = rss?.channel?.item || [];\n  \n      if (Array.isArray(items)) {\n        setCardInfos(oldItems => [...items.map(transformItem), ...oldItems]);\n      } else {\n        setCardInfos(oldItems => [transformItem(items), ...oldItems]);\n      }\n      setXml('');\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  const removeCard = (cardInfo) => {\n    // eslint-disable-next-line no-restricted-globals\n    if (!confirm('確定要移除嗎？')) return;\n\n    setCardInfos(oldItems => oldItems.filter(item => item !== cardInfo));\n  }\n\n\n  return (\n    <Container>\n      <div className=\"input-block no-print\" style={{ width: '100%', marginBottom: '16px', textAlign: 'right' }}>\n        <textarea\n          name=\"\"\n          id=\"\"\n          cols=\"30\"\n          rows=\"10\"\n          value={xml}\n          onChange={(e) => setXml(e.currentTarget.value)}\n        />\n        <button onClick={onSubmit}>送出</button>\n      </div>\n\n      {cardInfos.map(cardInfo => (<Card key={cardInfo.taskId} {...cardInfo} onClick={() => removeCard(cardInfo)} />))}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}